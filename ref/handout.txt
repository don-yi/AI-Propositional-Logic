Implement conversion to CNF and proof using by contradiction using resolution.

The provided code assumes that parsing is done by C++ compiler.  All class
names except CNF and KnowledgeBase are optional. 

If using brute-force in ProveByRefutation the expected times are:
0,...,9  - immediate
10       - 10 sec
11,12,13 - too long (hours)


Converting to CNF on the fly:
1) clause is an "or" of literals: A | B | ~C
2) CNF is a collection of clauses

Implement "and" and "or" of CNFs 
1) "and"
    CNF1 = clause1 & clause2 & clause3,
    CNF2 = clause4 & clause5 & clause6,
    CNF1 & CNF2 = clause1 & clause2 & clause3 & clause4 & clause5 & clause6

2) "or"
    CNF1 = clause1 & clause2 & clause3,
    CNF2 = clause4 & clause5 & clause6,
    CNF1 | CNF2 = 
                  c1|c4 & c1|c5 & c1|c6    &
                  c2|c4 & c2|c5 & c2|c6    &
                  c3|c4 & c3|c5 & c3|c6

3) implement negation
    a) if CNF is made of a single clause: A | B | ~C,
    negating it gives ~A & ~B & C (3 clauses)
    b) otherwise
    CNF = clause1 & clause2 & clause3,
    ~CNF = ~clause1 | ~clause2 | ~clause3 
    "or" is already implemented and "~" is on a single clause, so 3a) takes care of it

4) Implication:
    convert using 
    A=>B
    is equivalent to
    ~A|B
    "not" and "or" are already implemented.
